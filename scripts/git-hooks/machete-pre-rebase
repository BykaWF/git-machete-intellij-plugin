#!/usr/bin/env bash

set -e -o pipefail -u

# As per git hook spec, we can rely on this script being executed in the main repository dir.
source scripts/utils.sh

if (( $# == 3 )); then
  new_base=$1
  fork_point=$2
  current_branch=$3

  parse_version_from_git_revision base "$new_base"
  parse_version_from_git_revision head "$current_branch"

  if   (( $base_major > $head_major )); then
    do_rewrite=true
  elif (( $base_major < $head_major )); then
    do_rewrite=false
  elif (( $base_minor > $head_minor )); then
    do_rewrite=true
  elif (( $base_minor < $head_minor )); then
    do_rewrite=false
  elif (( $base_patch > $head_patch )); then
    do_rewrite=true
  else  # $base_patch <= $head_patch
    do_rewrite=false
  fi

  if eval $do_rewrite; then
    echo "Rewriting the commits: setting version in version.gradle to $base_version..."
    self_path="$(cd "$(dirname "$0")" &>/dev/null; pwd -P)"/"$(basename "$0")"
    # This is necessary to make sure that git does not wait for any interactive input
    # in case the hook is not run from a terminal (e.g. via the IDEA plugin).
    export FILTER_BRANCH_SQUELCH_WARNING=1
    git filter-branch -f --tree-filter "$self_path $base_version" "$fork_point".."$current_branch"
  fi
elif (( $# == 1 )); then
  target_version=$1

  # Using `-i.bak` and not just `-i` to retain compatibility with both Linux (GNU) sed and OS X (BSD) sed.
  sed -i.bak "/^\s*[A-Z_]*_VERSION = '.*'\$/  s/'.*'/'$target_version'/" version.gradle
  rm -f version.gradle.bak
fi
