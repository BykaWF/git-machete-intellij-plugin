#!/usr/bin/env bash

set -e -o pipefail -u

self_dir=$(cd "$(dirname "$0")" &>/dev/null; pwd -P)
source "$self_dir"/utils.sh


intellij_version=${1-} # can be skipped; the same IntelliJ version that the plugin has been built against will be assumed

ide_log=build/idea-sandbox/system/log/idea.log
ide_log_last_line=$(cat $ide_log | wc -l || echo 0)

# If we're on CI, run IDE on X Virtual Framebuffer; otherwise, open a regular window.
# --auto-servernum is deprecated in favor of --auto-display,
# but unfortunately xvfb-run available for Debian Buster (base of our CI image) doesn't support the latter.
command=${CI:+xvfb-run --auto-servernum}
gradle_run_ide_log=~/gradlew-runIdeForUiTests.gradle_run_ide_log
$command ./gradlew -PintellijVersionForRunIde=$intellij_version runIdeForUiTests >$gradle_run_ide_log 2>&1 &
# $! expands to the PID of the last process executed in the background
ide_pid=$!

# The test will gracefully close the IDE instance if successful,
# but we still need to kill the IDE instance in case that test was not successful AND the IDE is still running.
function finish {
  if ps -p $ide_pid >/dev/null 2>&1; then
    kill $ide_pid
  fi
}
trap finish EXIT

gradle_run_ide_log_last_line=0
# Let's wait until Remote Robot plugin living within the IDE starts listening.
info 'Logs of gradle runIdeForUiTests'
while ! nc -z localhost 8080; do
  sleep 0.5
  tail -n+$((gradle_run_ide_log_last_line+1)) $gradle_run_ide_log
  gradle_run_ide_log_last_line=$(wc -l < $gradle_run_ide_log)
  if ! ps -p $ide_pid >/dev/null 2>&1; then
    die 'IDE failed to start, aborting'
  fi
done

info 'Logs of gradle uiTests:test'
./gradlew -PenableUiTests --info uiTests:test || {
  info 'Logs of IDE under test'
  tail -n+$((ide_log_last_line+1)) $ide_log
  die 'UI tests failed; inspect Gradle and IDE logs above'
}
