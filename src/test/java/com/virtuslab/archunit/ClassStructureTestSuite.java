package com.virtuslab.archunit;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;
import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.noClasses;

import org.junit.Test;

public class ClassStructureTestSuite extends BaseArchUnitTestSuite {

  @Test
  public void actions_implementing_DumbAware_should_extend_DumbAwareAction() {
    classes()
        .that().areAssignableTo(com.intellij.openapi.actionSystem.AnAction.class)
        .and().implement(com.intellij.openapi.project.DumbAware.class)
        .should().beAssignableTo(com.intellij.openapi.project.DumbAwareAction.class)
        .because("`extends DumbAwareAction` should be used instead of " +
            "extending `AnAction` and implementing `DumbAware` separately")
        .check(importedClasses);
  }

  @Test
  public void inner_classes_should_not_be_used() {
    noClasses()
        .that().haveNameNotMatching("^.*\\$[0-9]+$") // inner classes autogenerated by the compiler
        .and()
        .haveNameNotMatching("^" + com.virtuslab.gitmachete.frontend.actions.dialogs.GitPushDialog.class.getName() + "\\$.*$")
        .and()
        .haveNameNotMatching("^" + com.virtuslab.gitmachete.frontend.actions.dialogs.OverrideForkPointDialog.class.getName()
            + "\\$WhenMappings$")
        .should().beInnerClasses()
        .because("inner (non-static nested) classes are currently unsafe & discouraged " +
            "due to https://github.com/typetools/checker-framework/issues/3407; " +
            "consider using a static nested class " +
            "and passing a reference to the enclosing object (or to the fields thereof) explicitly")
        .check(importedClasses);
  }

}
