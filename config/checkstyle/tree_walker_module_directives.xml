<!-- to enable @SuppressWarnings -->
<module name="SuppressWarningsHolder"/>

<module name="ArrayTypeStyle"/>
<module name="AvoidStarImport"/>
<module name="ConstantName">
    <property name="format" value="^(.*[Ii]nstance|.*[Ii]njector|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*)$"/>
</module>
<module name="CovariantEquals"/>
<module name="DefaultComesLast"/>
<module name="EmptyBlock">
    <property name="option" value="TEXT"/>
    <property name="tokens"
              value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
</module>
<module name="EmptyStatement"/>
<module name="EqualsHashCode"/>
<module name="FallThrough"/>
<module name="FinalClass"/>
<module name="HiddenField">
    <property name="ignoreConstructorParameter" value="true"/>
</module>
<module name="HideUtilityClassConstructor"/>
<module name="IllegalCatch"/>
<module name="IllegalImport">
    <!-- Use java.util.Optional instead. Vavr Option isn't statically verified by Checker Framework. -->
    <property name="illegalClasses" value="io.vavr.control.Option"/>
    <!-- Use String.format instead. MessageFormat isn't statically verified by Checker Framework. -->
    <property name="illegalClasses" value="java.text.MessageFormat"/>
    <!-- Use org.checkerframework.checker.nullness.qual.Nullable instead. -->
    <property name="illegalClasses" value="javax.annotation.Nonnull, javax.annotation.Nullable"/>
    <property name="illegalClasses" value="org.jetbrains.annotations.Nullable, org.jetbrains.annotations.NotNull"/>
</module>
<module name="IllegalThrows"/>
<module name="IllegalType"/>
<module name="InnerAssignment"/>
<module name="LeftCurly">
    <property name="tokens"
              value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT"/>
</module>
<module name="MissingSwitchDefault"/>
<module name="MultipleStringLiterals">
    <property name="allowedDuplicates" value="3"/>
</module>
<module name="MultipleVariableDeclarations"/>
<module name="ModifiedControlVariable"/>
<module name="ModifierOrder"/>
<module name="MutableException"/>
<module name="NeedBraces">
    <property name="tokens"
              value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
</module>
<module name="NestedTryDepth"/>
<module name="NoWhitespaceAfter"/>
<module name="NoWhitespaceBefore"/>
<module name="OneStatementPerLine"/>
<module name="PackageDeclaration"/>
<module name="ParameterAssignment"/>
<module name="RedundantModifier"/>
<!-- io.vavr.collection.Traversable#peek and java.util.stream.Stream#peek
        unexpectedly differ in their behaviour.
        To avoid possible bugs, invocation of any method called "peek" is forbidden. -->
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bpeek\b"/>
    <property name="message" value="Usage of the prohibited peek method"/>
</module>
<module name="RegexpSinglelineJava">
    <property name="format" value="\binterface\s+[^I]"/>
    <property name="ignoreComments" value="true"/>
    <property name="message" value="Interface names must start with 'I'" />
</module>
<module name="RightCurly">
    <property name="id" value="RightCurlySame"/>
    <property name="tokens"
              value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
</module>
<module name="StringLiteralEquality"/>
<module name="SuperClone"/>
<module name="UnnecessaryParentheses"/>
<module name="UnusedImports"/>
<module name="UpperEll"/>
