
import org.checkerframework.checker.index.qual.IndexFor;
import org.checkerframework.checker.index.qual.LengthOf;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.nullness.qual.PolyNull;
import org.checkerframework.checker.optional.qual.Present;
import org.checkerframework.common.value.qual.EnsuresMinLenIf;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.framework.qual.EnsuresQualifierIf;

package io.vavr;

interface Value<T> {
  @PolyNull T getOrElse(@PolyNull T other);

  @Nullable @Pure T getOrNull();
}


package io.vavr.collection;

interface Array<T> {
  @Pure T get(@IndexFor("this") int index);
}

interface List<T> {
  @Pure T get(@IndexFor("this") int index);

  @LengthOf("this") @Pure int length();

  @Pure @EnsuresMinLenIf(expression="this", result=false, targetValue=1) boolean isEmpty();
}

interface Map<K, V> {
  @PolyNull V getOrElse(K key, @PolyNull V defaultValue);
}

interface Traversable<T> {
  @LengthOf("this") @Pure int length();

  @LengthOf("this") @Pure int size();
}


package io.vavr.control;

@NonNull // We don't want any instance of Option to be nullable, that's almost always an indicator of bad design.
interface Option<T> {
  <U> io.vavr.control.Option<@PolyNull U> flatMap(java.util.function.Function<? super T, ? extends io.vavr.control.Option<@PolyNull ? extends U>> mapper);

  @Pure T get(@Present io.vavr.control.Option<T> this);

  @EnsuresQualifierIf(result = true, expression = "this", qualifier = Present.class) @Pure boolean isDefined();

  @EnsuresQualifierIf(result = false, expression = "this", qualifier = Present.class) @Pure boolean isEmpty();

  <U> io.vavr.control.Option<@PolyNull U> map(java.util.function.Function<? super T, @PolyNull ? extends U> mapper);

  static <T> io.vavr.control.Option<@NonNull T> of(@Nullable T value);
}
