
import org.checkerframework.checker.fenum.qual.Fenum;

// Note that in general the primary way to forbid a method/class should be via Checkstyle (`Regexp` -> `illegalPattern`);
// this is very crude (just detecting a string regardless of its actual semantics) but also very effective and hassle-free for most cases.
// The problem starts when we want to forbid a method of the given name on certain classes but not on others,
// and there's where a more fine-grained (but also heavier & more false-negative-prone) approach is necessary.

// Meet FenumChecker and its rather unorthodox/off-label usage.

package io.vavr;

// Invocation of `collect` on a Vavr Value (including Array, List, Map, Set etc.) is almost always avoidable,
// and in many cases indicates that a redundant conversion is being performed (like `collect`-ing a List into another List etc.).
// Use dedicated methods like `.toList()`, `.toJavaList()`, `.toSet()` etc.
// You might consider suppressing this error, however, if the Value in question is a Vavr Stream.

interface Value<T> {
  <R, A> R collect(
    @Fenum("io.vavr.Value#collect is discouraged, see config/checker/FORBIDDEN-METHODS.astub") Value<T> this,
    java.util.stream.Collector<? super T, A, R> collector
  );
}


package io.vavr.collection;

// io.vavr.collection.<X>#peek and java.util.stream.Stream#peek unexpectedly differ in their behaviour.
// `peek` from Vavr calls the given `Consumer` only for the first element in collection.
// `peek` from Java `Stream` calls the given `Consumer` for every element.
// To avoid possible bugs, invocation of Vavr `peek` is forbidden.
// Usage of Java `Stream#peek` is discouraged but not forbidden (since it's pretty useful and alternatives are cumbersome).

// Note that in the below stubs, `@Fenum` is always applied to `this` and not to the `Consumer` param.
// If only `action` (and not `this`) was `@Fenum(...)` instead, then for some reason `FenumChecker` wouldn't raise an error
// if a lambda was passed for `action`, which is likely >90% of cases for `Consumer`s and similar functional interfaces.

class Array<T> {
  Array<T> peek(
    @Fenum("io.vavr.collection.Array#peek is forbidden, see config/checker/FORBIDDEN-METHODS.astub") Array<T> this,
    Consumer<? super T> action
  );
}

interface Iterator<T> {
  Iterator<T> peek(
    @Fenum("io.vavr.collection.Iterator#peek is forbidden, see config/checker/FORBIDDEN-METHODS.astub") Iterator<T> this,
    Consumer<? super T> action
  );
}

interface List<T> {
  List<T> peek(
    @Fenum("io.vavr.collection.List#peek is forbidden, see config/checker/FORBIDDEN-METHODS.astub") List<T> this,
    Consumer<? super T> action
  );
}

interface Stream<T> {
  Stream<T> peek(
    @Fenum("io.vavr.collection.Stream#peek is forbidden, see config/checker/FORBIDDEN-METHODS.astub") Stream<T> this,
    Consumer<? super T> action
  );
}

interface Traversable<T> {
  Traversable<T> peek(
    @Fenum("io.vavr.collection.Traversable#peek is forbidden, see config/checker/FORBIDDEN-METHODS.astub") Traversable<T> this,
    Consumer<? super T> action
  );
}


package io.vavr.control;

// Option#toString is commonly mistakenly interpolated inside strings (also the user-facing ones),
// whereas in 90% of cases the programmer's intention was to interpolate the contained value aka the result of `.get()`
// and not the Option itself.
// To avoid possible errors, let's forbid calls to Option#toString.
// Note that it still won't cover the implicit `toString` calls performed when `+`-adding strings,
// or (obviously) `toString` calls performed under the hood by the methods that aren't a part of our codebase.

interface Option<T> {
  String toString(
    @Fenum("io.vavr.control.Option#toString is discouraged, see config/checker/FORBIDDEN-METHODS.astub") Option<T> this
  );
}
