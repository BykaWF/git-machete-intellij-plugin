
import org.checkerframework.checker.index.qual.IndexFor;
import org.checkerframework.checker.index.qual.LengthOf;
import org.checkerframework.checker.nullness.qual.PolyNull;
import org.checkerframework.common.value.qual.EnsuresMinLenIf;
import org.checkerframework.dataflow.qual.Pure;

package io.vavr.collection;

interface Array<T> {
  @Pure T get(@IndexFor("this") int index);
}

interface List<T> {
  @Pure T get(@IndexFor("this") int index);

  @LengthOf("this") @Pure int length();

  @Pure @EnsuresMinLenIf(expression="this", result=false, targetValue=1) boolean isEmpty();
}

interface Map<K, V> {
  @PolyNull V getOrElse(K key, @PolyNull V defaultValue);
}

interface Traversable<T> {
  @LengthOf("this") @Pure int length();

  @LengthOf("this") @Pure int size();
}
